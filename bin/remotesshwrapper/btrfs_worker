#!/usr/bin/env perl
use 5.010;
use strict;
use warnings;

use JSON;
use Date::Parse;
use POSIX qw( floor );
use File::Glob ':glob';
use Data::Dumper;

my $data = $ARGV[0];
my $data_ref = decode_json($data);

my $tooltype = $data_ref->{'tooltype'};
my $event    = $data_ref->{'event'};
my $mount    = $data_ref->{'mount'} || "";

my $worker_status;
my $btrfs_args = "$tooltype $event $mount";
exit unless $btrfs_args =~ m/^[a-zA-Z0-9_\-\/\s]+$/;

if ( $tooltype eq "filesystem" ) {
    if ( $event eq "df" ){
        my @outputs    = `/usr/local/bin/btrfs $btrfs_args`;
        my $df;
        my @df_result;

        foreach my $output ( @outputs ) {
            my ($type, $profile, $total, $used) = $output =~ m/^([a-zA-Z]+), ([a-zA-Z0-9]+): total=([0-9.a-zA-Z]+), used=([0-9.a-zA-Z]+)$/;
            $df = {
                'type'    => $type,
                'profile' => $profile,
                'total'   => $total,
                'used'    => $used,
            };
            push ( @df_result, $df );
        }

        $worker_status = {
            'return_code' => 1,
            'return_msg'  => \@df_result,
        };
    } elsif ( $event eq "show" ){
        my @outputs    = `/usr/local/bin/btrfs $btrfs_args`;
        my %fs;
        my $label;
        my %deviceList;
        my @deviceList = glob("/dev/iscsi/*");  #get sdXY <-> bkpX-lun-Y mapping

        foreach my $device (@deviceList) {
            my $link = readlink($device);
            $link =~ s#\.\./##;
            $deviceList{$link} = $device;
        }

        foreach my $line ( @outputs ) {
            next if $line =~ m/^#/;     # skip comments
            next if $line =~ m/Btrfs v/; # skip version tag

            if ( $line =~ qr{^Label:\s'(?<label>[^']*)'\s+ uuid:\s(?<uuid>[0-9a-z-]*)$ }x ) {
                my $uuid = $+{uuid};
                $label   = $+{label};
                $fs{$label}{uuid} = $uuid;
            } elsif ( $line =~ qr{ Total \s devices \s+ (?<devcount>[0-9]*) \s+
                                   FS \s bytes \s used \s+ (?<totsize>[0-9.]*[a-zA-Z]{0,3}).* \s
                                   }x
                                ){
                $fs{$label}{devcount} = $+{devcount};
                $fs{$label}{totsize}  = $+{totsize};
            } elsif ( $line =~ qr{ devid \s+ (?<devid>[0-9]*) \s+
                                   size \s (?<devsize>[0-9.]*[a-zA-Z]{0,3}).* \s
                                   used \s (?<devused>[0-9.]*[a-zA-Z]{0,3}).* \s
                                   path \s (?<devpath>.*)$
                                   }x
                               ){
                my $devid   = $+{devid};
                my $devpath = $+{devpath};
                $fs{$label}{devices}{$devid}{devsize} = $+{devsize};
                $fs{$label}{devices}{$devid}{devused} = $+{devused};
                $fs{$label}{devices}{$devid}{devpath} = $devpath;
                if (my ($bd) = $devpath =~ m#/dev/(sd\w+)#) {                   #BTRFS shows us /dev/sdX, but we want iSCSI devices
                    $fs{$label}{devices}{$devid}{iscsipath} = $deviceList{$bd};
                }
            }
        }

        $worker_status = {
            'return_code' => 1,
            'return_msg'  => \%fs,
        };
    }

} else {
    system("nohup /usr/local/bin/btrfs $btrfs_args > /dev/null &");

    $worker_status = {
        'return_code' => 1,
        'return_msg'  => "$btrfs_args",
    };
}

my $json = JSON->new->allow_nonref;
my $json_text = $json->encode($worker_status);
print "$json_text";
