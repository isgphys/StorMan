#!/usr/bin/env perl
use 5.010;
use strict;
use warnings;

use JSON;
use Date::Parse;
use POSIX qw( floor );
use File::Glob ':glob';
use Data::Dumper;
use Proc::Background;

my $data = $ARGV[0];
my $data_ref = from_json($data);

my $tooltype = $data_ref->{'tooltype'};
my $event    = $data_ref->{'event'};
my $mount    = $data_ref->{'mount'} || "";

my $worker_status;
my $BTRFS = "/usr/local/bin/btrfs";
my $btrfs_args = "$tooltype $event $mount";

exit unless $btrfs_args =~ m/^[a-zA-Z0-9_\-\/\s]+$/;

if ( $tooltype eq "filesystem" ) {
    if ( $event eq "df" ){
        my @outputs    = `$BTRFS $btrfs_args`;
        my $df;
        my @df_result;

        foreach my $output ( @outputs ) {
            my ($type, $profile, $total, $used) = $output =~ m/^([a-zA-Z]+), ([a-zA-Z0-9]+): total=([0-9.a-zA-Z]+), used=([0-9.a-zA-Z]+)$/;
            $df = {
                'type'    => $type,
                'profile' => $profile,
                'total'   => $total,
                'used'    => $used,
            };
            push ( @df_result, $df );
        }

        $worker_status = {
            'return_code' => 1,
            'return_msg'  => \@df_result,
        };
    } elsif ( $event eq "show" ){
        my @outputs    = `$BTRFS $btrfs_args`;
        my %fs;
        my $label;
        my %deviceIscsiList;
        my %devicePathList;
        my $PVpattern = '/dev/iscsi/\d?([\d\w.]+)-(.+)';
        my @completeIscsiList = glob("/dev/iscsi/*");                        #get bkpX-lun-Y -> sdXY mapping
        my @completePathList = glob("/dev/disk/by-path/*");                  #get pci-0000:18:00.0-scsi-0:0:1:0 -> sdXY mapping
        my @relevantList = grep { $_ =~ /$PVpattern/ } @completeIscsiList;

        foreach my $device (@relevantList) {
            my $link = readlink($device);
            $link =~ s#\.\./##;
            $deviceIscsiList{$link} = $device;
        }

        foreach my $device (@completePathList) {
            my $link = readlink($device);
            $link =~ s#\.\./\.\./##;
            $devicePathList{$link} = $device;
        }

        foreach my $line ( @outputs ) {
            next if $line =~ m/^#/;     # skip comments
            next if $line =~ m/Btrfs v/; # skip version tag

            if ( $line =~ qr{^Label:\s'(?<label>[^']*)'\s+ uuid:\s(?<uuid>[0-9a-z-]*)$ }x ) {
                my $uuid = $+{uuid};
                $label   = $+{label};
                $fs{$label}{uuid} = $uuid;

                my $scrubstats = "/var/lib/btrfs/scrub.status.$uuid";

                if ( -e $scrubstats ){
                    open( FH, "<", "$scrubstats")or die ("Can't open $scrubstats: $!");

                    while (<FH>){
                        chomp $_;
                        my ($line) = $_;
                        if ( $line =~ /^scrub status/ ){
                            ($fs{$label}{scrubstats}{status}) = $line =~ /^scrub status:(.*)$/;
                        } else {
                            my @fields = split(/\|/, $line);
                            my $scrub_devid;
                            foreach my $field (@fields) {
                                if ( $field =~ /^[0-9a-z]{8}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{4}-[0-9a-z]{12}:([0-9]*)$/ ){
                                    $scrub_devid = $1;
                                }else{
                                    my ($key, $value) = split(/:/, $field);
                                    $fs{$label}{scrubstats}{devices}{$scrub_devid}{$key} = $value;
                                }
                            }
                        }
                    }
                    close FH;
                }
            } elsif ( $line =~ qr{ Total \s devices \s+ (?<devcount>[0-9]*) \s+
                                   FS \s bytes \s used \s+ (?<totsize>[0-9.]*[a-zA-Z]{0,3}).* \s
                                   }x
                                ){
                $fs{$label}{devcount} = $+{devcount};
                $fs{$label}{totsize}  = $+{totsize};
            } elsif ( $line =~ qr{ devid \s+ (?<devid>[0-9]*) \s+
                                   size \s (?<devsize>[0-9.]*[a-zA-Z]{0,3}).* \s
                                   used \s (?<devused>[0-9.]*[a-zA-Z]{0,3}).* \s
                                   path \s (?<devpath>.*)$
                                   }x
                               ){
                my $devid   = $+{devid};
                my $devpath = $+{devpath};
                $fs{$label}{devices}{$devid}{devsize} = $+{devsize};
                $fs{$label}{devices}{$devid}{devused} = $+{devused};
                $fs{$label}{devices}{$devid}{devpath} = $devpath;
                if (my ($bd) = $devpath =~ m#/dev/(sd\w+)#) {                       # BTRFS shows us /dev/sdX, ...
                    $fs{$label}{devices}{$devid}{iscsipath} = $deviceIscsiList{$bd};    # but we want /dev/iscsi/ devices
                    $fs{$label}{devices}{$devid}{bypath}    = $devicePathList{$bd}      # but we want /dev/disk/by-path/ devices
                }
            }
        }

        $worker_status = {
            'return_code' => 1,
            'return_msg'  => \%fs,
        };
    }

} else {
    my $proc1 = Proc::Background->new("$BTRFS $btrfs_args > /dev/null");

    $worker_status = {
        'return_code' => 1,
        'return_msg'  => "$btrfs_args",
    };
}

print to_json($worker_status);
