#!/usr/bin/env perl
use 5.010;
use strict;
use warnings;

use JSON;
use Date::Parse;
use POSIX qw( floor );
use Data::Dumper;

my $data = $ARGV[0];
my $data_ref = decode_json($data);

my $tooltype = $data_ref->{'tooltype'};
my $event    = $data_ref->{'event'};
my $mount    = $data_ref->{'mount'};

my $worker_status;
my $btrfs_args = "$tooltype $event $mount";
exit unless $btrfs_args =~ m/^[a-zA-Z0-9_\-\/\s]+$/;

if ( $tooltype eq "filesystem" ) {
    my @outputs    = `/usr/local/bin/btrfs $btrfs_args`;
    my $df;
    my @df_result;

    foreach my $output ( @outputs ) {
        my ($type, $profile, $total, $used) = $output =~ m/^([a-zA-Z]+), ([a-zA-Z0-9]+): total=([0-9.a-zA-Z]+), used=([0-9.a-zA-Z]+)$/;
        $df = {
            'type'    => $type,
            'profile' => $profile,
            'total'   => $total,
            'used'    => $used,
        };
        push ( @df_result, $df );
    }

    $worker_status = {
        'return_code' => 1,
        'return_msg'  => \@df_result,
    };

} else {
    system("nohup /usr/local/bin/btrfs $btrfs_args > /dev/null &");

    $worker_status = {
        'return_code' => 1,
        'return_msg'  => "$btrfs_args",
    };
}

my $json = JSON->new->allow_nonref;
my $json_text = $json->encode($worker_status);
print "$json_text";
